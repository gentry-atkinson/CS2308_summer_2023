### Style ###
This is the exact same as the CS1428 projects

1. Lines less than 80 characters:
    1 or 2 lines over: -1 point
    3 to 5 lines over: -2 points
    5 to 10 lines over: -3 points
    11+ lines over: -4 points

2. Variables have meaningful names:
    Pretty much everyone gets full points for this.

3. Functions and actions are fully commented
    There should be a function every 4 or 5 lines or for "complicated" actions.
    Few comments: -2 points
    Only 1 or 2 comments: -3 points
    No comments: -4 points

4. Every block indented:
    1 or 2 lines not indented: full credit
    Some indenting but it's not consistent: -1 points
    Nothing indented: -2 points

5. Code is not duplicated between branches (e.g. in an if...else):
    Only take off credit if a statement is duplicated in EVERY path of a branch.
    Every switch or if..else that contains the same statement in every path: -1 points up to 2 points off

6. File name is...
    OK, I keep forgetting to update this entry in the rubric and that's my fault.
    So we will be accepting [Author's Last Name]_assignment and then any number.
    Any other name: -1 or -2 depending on how close it is

7. Name and Date Comment:
    Name not included: -1 point
    Data not included: -1 point

### Non-functional Requirements ###

1. Robot struct has all listed member.
    Members missing X, Y, lastCommand, currentSpeed, distance, or name : -1 point each
    Program does not set names for robots: -5 points
    Position stored as a separate variable or variables, not part of Robot: -5 points
    Position not stored: -10 points

2. Program stores array of Robots. (Can be a Vector or other collection too)
    Variables are stored in separate arrays, not Robot structs: -3 points
    Only one Robot(not an array) is created: -5 points
    Program does not let user name robots: -5 points

3. Robotsâ€™ positions are updated using moveRobot function
    Robot position is updated in main function, rather than in moveRobot: -3 points
    currentSpeed and distance are not also updated: -3 points
    Program does not up Robot positions: -5 points

### Test Cases ###
Do not grade the test cases for programs that do not compile. Just grade them as 0 for
each test case.

Programs that crash, halt, or terminate early should be graded as a 0 for every case
that would have been tested after the halt.

Please still maintain a list of programs that crash, quit early, or do not compile. I'll
check those myself to see if they compile in a different environment for some reason.

1. Start Program
    'Welcome' message of some sort is not printed: -2 points
    Program does not compile or run: (just put the name on a list) 

2. 3 Autumn Marwa Keiko
    Menu is printed, but does not have all options: -2 points
    Program does not ask user to name robots: -3 points
    Program does not ask user for a number of robots: -5 points
    Menu is not printed: -5 points
    Program does not compile or run: (just put the name on a list)

3. m Autumn L
    Position is wrong: -3 points
    Program does not ask which robot to move: -3 points
    Program does not recognize 'm' or L as input: -3 points
    Program crashes: (just put the name on a list)

4. T
    Program does not print an error: -2 points
    Program tries to update a robot's position but fails: -3 points
    Program does update a robot's position: -5 points
    Program crashes: (just put the name on a list)

5. M Karl
    Program does not print an error message, but doesn't do anything else: -2 points
    Program tries to move a robot or asks for a direction: -5 points 

6. m Marwa u
    Position is wrong: -3 points
    Program does not ask which robot to move: -3 points
    Program does not recognize 'm' or L as input: -3 points
    Program does not recognize 'm' or u as input: -3 points
    Program crashes: (just put the name on a list)

7. m Autumn L
    Position is wrong (and should have sped up): -3 points
    Program does not ask which robot to move: -3 points
    Program does not recognize 'm' or l as input: -3 points
    Program crashes: (just put the name on a list)

8. m Marwa r
    Position is wrong (and should not have sped up): -3 points
    Program does not ask which robot to move: -3 points
    Program does not recognize 'm' or l as input: -3 points
    Program crashes: (just put the name on a list)

9. D
    Not all robots are in list: -5 points
    Distances are incorrect: -3 points/distance
    Distances are printed without names: -5 points
    Names are printed without distances: -5 points
    Program crashes: (just put the name on a list)

10. Q
    Program exits without printing a "goodbye" message: -2 points
    Program keeps running: -5 points
    
