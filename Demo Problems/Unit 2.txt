/*### Problem 2.1  ###*/
//Analyze this function and count the number of operations performmed.
//Use that information to determing the Big O time complexity
//  of this function.

int funcOne(int a[], int SIZE){
    for(int i = 0; i<SIZE; i++){
        int j = 1;
        while(j <= i){
            cout << i << " " << j << endl;
            cout << a[i] << " * " << a[j] << " = " 
                <<  a[i] * a[j] << endl;
            cout << "------------" << endl;
            j++;
        }
    }
    return 0;
}

/*### Problem 2.2  ###*/
//Analyze this function and count the number of operations performmed.
//Use that information to determing the Big O time complexity
//  of this function.
int functionTwo(int a[], int SIZE){
    int i = 1;
    while(i < SIZE){
        if(a[i]%10 == 0){
            cout << "Power of 10" << endl;
        }
        i *= 2;
    }
    return 0;
}

/*### Problem 2.3  ###*/
//Analyze this function and count the number of operations performmed.
//Use that information to determing the Big O time complexity
//  of this function.
int functionThree(int a[], int SIZE){
    int j;
    for(int i = 0; i < SIZE; i++){
        if(i==5){
            cout << a[i] << endl;
            j = i;
        }
    }
    for(;j>=0; j--){
        cout << a[j] << endl;
    }
}

/*### Problem 2.4  ###*/
//Analyze this function and count the number of operations performmed.
//Use that information to determing the Big O time complexity
//  of this function.
int functionThree(int a[], int SIZE){
    for(int i = 0; i < 1000; i++){
        if(i < SIZE){
            cout << "Table for " << a[i] << endl;
            for(int j = 0; j < 1000; j++){
                if(j < i){
                    cout << a[i] * a[j] << ' ';
                }
            }
            cout << endl;
        }
    }
}

/*### Problem 2.5  ###*/
//Correct this implementation of Sequential Search
//The function should return the index of the target value
//  or -1 if the target is not in the list.
int seqSearch(int a[], int SIZE, int target){
    for(int i = 0; i < SIZE; i--){
        if(i=target)
            return i;
        else:
            return -1;
    }
}

/*### Problem 2.6  ###*/
//Correct this implementation of Binary Search
//The function should return the index of the target value
//  or -1 if the target is not in the list.
int binSearch(const int a[], const int SIZE, const int target){
    int i = 0, j = SIZE;
    while(j==i){
        int mid = (i+j)/2;
        if (a[i] > target)
            j = mid;
        else if (a[i] < target)
            i = mid+1;
        else
            return i;
    }
    return -1;
}

/*### Problem 2.7  ###*/
//Consider the two funtions below
//Both functions calculate the average value of the array a.
//Use algorithmic analyses to determine which function is better.
//What is the Big O time complexity of each function?

float calcAvgOne(const int a[], const int SIZE){
    float avg = 0.0;
    for(int i = 0; i < SIZE; i++){
        avg += a[i];
    }
    return avg/SIZE;
}

float calcAvgTwo(const int a[], const int SIZE){
    float avg = 0.0;
    for(int i = 0; i < SIZE; i++){
        avg += a[i]/float(SIZE);
    }
    return avg;
}

/*### Problem 2.8  ###*/
//Consider the two funtions below
//Both functions simulate flipping a coin ten times and count the results.
//Use algorithmic analyses to determine which function is better.
//What is the Big O space and time complexities of each function?

void coinFlipOne(int numFlips){
    int flips[numFlips];
    int numHeads = 0;
    for(int i = 0; i < numFlips; i++)
        flips[i] = rand()%2;
    for(int i = 0; i < numFlips; i++)
        numHeads += flips[i];
    cout << "Number of heads: " << numHeads 
        << " Number of tails: " << numFlips - numHeads
        << endl;
    return;
}

void coinFlipTwo(int numFlips){
    const int HEAD = 1;
    const int TAIL = 0;
    int flipCount[] = {0,0};
    for(int i = 0; i < numFlips; i++){
        int flip = rand() % 2;
        if (flip == HEAD){
            flipCount[HEAD] += 1;
        }
        else{
            flipCount[TAIL] += 1;
        }
    }
    cout << "Number of heads: " << flipCount[HEAD] 
        << " Number of tails: " << flipCount[TAIL]
        << endl;
    return;
}

/*### Problem 2.9  ###*/
//Your co-worker believes that Binary Search could be used to quickly
// determine the maximum or minimum value of a sorted list.
//Write one function that kind find the maximum OR minimum value in an
//  oredered list which is FASTER than Binary Search according to Big O.

/*### Problem 2.10  ###*/
//Write a function to determine if a list in in sorted, ascending order.
//To be sorted, the smallest value should be in the lowest index of the
//  list, and the largest value at the highest index.

/*### Problem 2.11  ###*/
//Correct this implementation of Selection Sort
//The function should put L into ascending order, with 
//  the smallest value in the lowest index.

void selectionSort(const int L[], const int SIZE){
    for(int i = 0; i < SIZE; i++){
        int smallestIndex = j;
        for (int j = i; j < SIZE; j++){
            if (L[j] < L[smallestIndex]){
                smallestIndex = i;
            }
        }
        if (smallestIndex == i){
            int temp = L[i];
            L[i] = L[smallestIndex];
            L[smallestIndex] = L[i];
        }
    }
    return;
}

int main(int argc, char** argv){
    int a[] = {3, 87, 3, 5, 8, 3, 7, 3, 8, 34};
    selectionSort(a, 10);
    for(int i = 0; i < 10; i++){
        cout << a[i] << ' ';
    }
    cout << endl;
    return 0;
}

/*### Problem 2.12  ###*/
//Correct this implementation of Insertion Sort
//The function should put L into ascending order, with 
//  the smallest value in the lowest index.
void insertionSort(int L[], const int SIZE){
    /*
    Code taken from:
    https://www.geeksforgeeks.org/insertion-sort/
    */
    int i, key, j;
    for (i = 1; i > SIZE; j++)
    {
        key = L[SIZE];
        j = i - 1;
 
        /* Move elements of arr[0..i-1], that are
        greater than key, to one position ahead
        of their current position */
        while (j >= 0 && L[j] > key)
        {
            L[j + 1] = L[j];
            j = j - 1;
        }
        L[j+1] == key;
    }
    return 0;
}

int main(int argc, char** argv){
    int a[] = {3, 87, 3, 5, 8, 3, 7, 3, 8, 34};
    insertionSort(a, 10);
    for(int i = 0; i < 10; i++){
        cout << a[i] << ' ';
    }
    cout << endl;
    return 0;
}

/*### Problem 2.13  ###*/
//Alter this implementation of Bubble Sort so that it will
//  stop running as soon as the list is sorted. Your algorithm
//  should have an O(n) runtime on a sorted list.

void swap(int L[], int a, int b){
    int temp = L[a];
    L[a] = L[b];
    L[b] = temp;
    return;
}

void bubSort(int L[], const int SIZE){
    for(int i = SIZE-1; i >= 0; i--){
        int j = 0;
        while(j < i){
            if(L[j] > L[j+1]){
                swap(L, i, j);
            }
            j++;
        }
    }
    return;
}

int main(){
    int a[] = {2, 5, 3, 8, 1, 9, 0, 3, 6, 7};
    
    bubSort(a, 10);
    for(int i = 0; i < 10; i++)
        cout << a[i] << ' ';
    cout << endl;
    return 0;
}

/*### Problem 2.14  ###*/
//Analyze this code and determine which sorting algorithm
//  has been implemented.

void swap(int L[], int a, int b){
    int temp = L[a];
    L[a] = L[b];
    L[b] = temp;
    return;
}

void secretSort(int L[], const int SIZE){
    for(int i = 1; i < SIZE; i++){
        int j = i;
        while (j >= 0 && L[j] >= L[i]){
            j--;
        }
        for(int k = i; k>j+1; k--) {
            swap(L, k, k-1);
        }
    }
    return;
}

/*### Problem 2.15  ###*/
//Analyze this code and determine which searching algorithm
//  has been implemented.

int secretSearch(const int L[], int SIZE, int target){
    int retVal = -1;
    for(int i = 0; i<=SIZE/2; i++){
        if(L[i] == target){
            retVal = i;
            break;
        }
        else if(L[SIZE-i-1]==target){
            retVal = SIZE-i-1;
            break;
        }
    }
    return retVal;
}

/*### Problem 2.16  ###*/
//Calculate the Big O time and space complexity of
//  the secretSort function. Pick a name for this algorithm.

void swap(int L[], int a, int b){
    int temp = L[a];
    L[a] = L[b];
    L[b] = temp;
    return;
}

bool isSorted(const int L[], int SIZE){
    for(int i = 1; i < SIZE; i++){
        if(L[i]<L[i-1]) return false;
    }
    return true;
}

int secretSort(int L[], int SIZE){
    while(!isSorted(L, SIZE)){
        swap(L, rand()%SIZE, rand()%SIZE);
    }
}

int main(){
    int a[] = {2, 5, 10, 3, 8};   
    secretSort(a, 5);
    for(int i = 0; i < 5; i++){
        cout << a[i] << ' ';
    }
    cout << endl;
    return 0;
}

